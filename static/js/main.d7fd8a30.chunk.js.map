{"version":3,"sources":["Topic/topic.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Topic","gridTopicList","desc","attribute","react_default","a","createElement","className","this","map","item","i","key","Component","App","react","topic_Topic","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRAGqBA,oNACnBC,cAAgB,CACd,CAAEC,KAAM,gCAAaC,UAAW,uBAChC,CAAED,KAAM,gCAAaC,UAAW,uBAChC,CAAED,KAAM,gCAAaC,UAAW,gGAIhC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAEbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,mBAGDE,KAAKP,eACJO,KAAKP,cAAcQ,IAAI,SAACC,EAAMC,GAC5B,OACEP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQK,IAAKD,GAC1BP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiBI,EAAI,IAEtCP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQG,EAAKR,MAC5BE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiBG,EAAKP,uBAxBpBU,oBC+BpBC,MAjBf,WACE,OACEV,EAAAC,EAAAC,cAACS,EAAA,SAAD,KACEX,EAAAC,EAAAC,cAACU,EAAD,QCRcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d7fd8a30.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"./topic.scss\";\nexport default class Topic extends Component {\n  gridTopicList = [\n    { desc: \"定義area區塊1\", attribute: \"grid-template-areas\" },\n    { desc: \"定義area區塊2\", attribute: \"grid-template-areas\" },\n    { desc: \"定義area區塊3\", attribute: \"grid-template-areas\" }\n  ];\n\n  render() {\n    return (\n      <div className=\"bg\">\n        <div className=\"topic-container\">\n          {/* Grid Topic */}\n          <div className=\"title\">\n            <h1>Grid</h1>\n          </div>\n\n          {this.gridTopicList &&\n            this.gridTopicList.map((item, i) => {\n              return (\n                <div className=\"topic\" key={i}>\n                  <div className=\"index\">\n                    <div className=\"index-num-box\">{i + 1}</div>\n                  </div>\n                  <div className=\"desc\">{item.desc}</div>\n                  <div className=\"css-attribute\">{item.attribute}</div>\n                </div>\n              );\n            })}\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Fragment } from \"react\";\n\nimport Topic from \"./Topic/topic\";\n\n// import GridDemo1 from \"./Grid/demo1/demo1\";\n// import GridDemo2 from \"./Grid/demo2/demo2\";\n// import GridDemo3 from \"./Grid/demo3/demo3\";\n\n// import FlexboxDemo1 from \"./Flexbox/demo1/demo1\";\n// import FlexboxDemo2 from \"./Flexbox/demo2/demo2\";\n// import FlexboxDemo3 from \"./Flexbox/demo3/demo3\";\n// import FlexboxDemo4 from \"./Flexbox/demo4/demo4\";\n// import FlexboxDemo5 from \"./Flexbox/demo5/demo5\";\n// import FlexboxDemo6 from \"./Flexbox/demo6/demo6\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Fragment>\n      <Topic />\n      {/* <GridDemo1 /> */}\n      {/* <GridDemo2 /> */}\n      {/* <GridDemo3 /> */}\n      {/* <FlexboxDemo1 /> */}\n      {/* <FlexboxDemo2 /> */}\n      {/* <FlexboxDemo3 /> */}\n      {/* <FlexboxDemo4 /> */}\n      {/* <FlexboxDemo5 /> */}\n      {/* <FlexboxDemo6 /> */}\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}